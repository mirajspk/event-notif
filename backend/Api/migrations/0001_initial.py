# Generated by Django 5.1.4 on 2025-02-09 11:48

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Clubs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('club_name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('club_image', models.URLField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('clubs', models.ManyToManyField(to='Api.clubs')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('user_type', models.CharField(choices=[('ADMIN', 'Admin'), ('PARTICIPANT', 'Participant')], default='PARTICIPANT', max_length=20)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admins', to='Api.clubs')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2555, null=True)),
                ('location', models.CharField(max_length=2555, null=True)),
                ('date', models.DateField()),
                ('host', models.CharField(choices=[('KUCC', 'Kathmandu University Computer Club'), ('AMES', 'Association of Mechanical Engineering'), ('KUCMC', 'Compuatiional Mathematics Club'), ('FECAM', 'Forum for Environmental Conservation and Management'), ('FoP', 'Forum of Pharmacy'), ('KUARC', 'Kathmandu University Architecture Students Club'), ('GES', 'Geomatics Engineering Society'), ('KUCONC', 'Kathmandu University Circle of Noble Chemineers'), ('KUCEC', 'Kathmandu University Civil Engineering Club'), ('KUCC', 'Kathmandu University Computer Club'), ('NSCS', 'Natural and Social Concern Society'), ('KURC', 'Kathmandu University Robotics Club'), ('KUBIC', 'Biotechnology Creatives'), ('SEEE', 'Society of Electrical and Electronic Engineers'), ('SBIS', 'Society of business Information Student'), ('KUAIC', 'Artificial Intellengence Club'), ('KUGIC', 'Kathmandu University Indoors Games Club'), ('KUSMC', 'Kathmandu University Society of Music and Clulture')], max_length=500)),
                ('type', models.CharField(max_length=50)),
                ('registration_link', models.URLField(max_length=500)),
                ('startTime', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='events/')),
                ('imageTwo', models.ImageField(blank=True, null=True, upload_to='events/')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('email', models.EmailField(max_length=254)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Api.event')),
            ],
            options={
                'unique_together': {('event', 'email')},
            },
        ),
    ]
